<% layout('layouts/boilerplate')%>

<style>
/* body{
    background-color: rgb(44, 208, 236);
} */
</style>

<div id="map" style="width: 100%; height: 500px;"></div>    
<h1> All Airports</h1>
    <ul> 
        
        <% for(let airport of airports )  { %> 
            <div class="card mb-3 bg-primary">
                <div class="row">
                    <div class="col-md-4"> 
                        <% if(airport.images.length){ %> 
                        <img class="img-fluid" alt="" src="<%=airport.images[0].url%>">
                        <% } else { %> 
                            <img class="img-fluid" alt="" src="https://res.cloudinary.com/ibrahimp25/image/upload/v1631972000/Airporter/x1vccikvbols9ewyetui.png">

                        <% } %> 

                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title"><%=airport.title%> (<%= airport.code %>) </h5>
                            <p class="card-text"><%= airport.description %> </p>
                            <p class="small-text-muted"><%=airport.location%> </p>
                            <a href="/airports/<%=airport.id%>">
                                <button class="btn btn-light bg-warning">View More</button>
                            </a>
                            
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    </ul>


<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiaWJ1cGF0cmEiLCJhIjoiY2t0cHNuMWpzMGZ2aDJubDN3NTJvNG9pdyJ9.CP7yOuJucJL4n3irftxnSA';
    const airports = {features: <%-JSON.stringify(airports)%>};
    const map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/light-v10',
    center: [-103.5917, 40.6699],
    zoom: 3
    });
     
    map.on('load', () => {
    // Add a new source from our GeoJSON data and
    // set the 'cluster' option to true. GL-JS will
    // add the point_count property to your source data.
    map.addSource('airports', {
    type: 'geojson',
    // Point to GeoJSON data. This example visualizes all M1.0+'airports
    // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
    data: airports,
    cluster: true,
    clusterMaxZoom: 14, // Max zoom to cluster points on
    clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
    });
     
    map.addLayer({
    id: 'clusters',
    type: 'circle',
    source: 'airports',
    filter: ['has', 'point_count'],
    paint: {
    // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
    // with three steps to implement three types of circles:
    //   * Blue, 20px circles when point count is less than 100
    //   * Yellow, 30px circles when point count is between 100 and 750
    //   * Pink, 40px circles when point count is greater than or equal to 750
    'circle-color': [
    'step',
    ['get', 'point_count'],
    '#51bbd6',
    100,
    '#f1f075',
    750,
    '#f28cb1'
    ],
    'circle-radius': [
    'step',
    ['get', 'point_count'],
    20,
    100,
    30,
    750,
    40
    ]
    }
    });
     
    map.addLayer({
    id: 'cluster-count',
    type: 'symbol',
    source: 'airports',
    filter: ['has', 'point_count'],
    layout: {
    'text-field': '{point_count_abbreviated}',
    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
    'text-size': 12
    }
    });
     
    map.addLayer({
    id: 'unclustered-point',
    type: 'circle',
    source: 'airports',
    filter: ['!', ['has', 'point_count']],
    paint: {
    'circle-color': '#11b4da',
    'circle-radius': 4,
    'circle-stroke-width': 1,
    'circle-stroke-color': '#fff'
    }
    });
     
    // inspect a cluster on click
    map.on('click', 'clusters', (e) => {
    const features = map.queryRenderedFeatures(e.point, {
    layers: ['clusters']
    });
    const clusterId = features[0].properties.cluster_id;
    map.getSource('airports').getClusterExpansionZoom(
    clusterId,
    (err, zoom) => {
    if (err) return;
     
    map.easeTo({
    center: features[0].geometry.coordinates,
    zoom: zoom
    });
    }
    );
    });
     
    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    map.on('click', 'unclustered-point', (e) => {
    const coordinates = e.features[0].geometry.coordinates.slice();
    const mag = e.features[0].properties.mag;
    const tsunami =
    e.features[0].properties.tsunami === 1 ? 'yes' : 'no';
     
    // Ensure that if the map is zoomed out such that
    // multiple copies of the feature are visible, the
    // popup appears over the copy being pointed to.
    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
    }
     
    new mapboxgl.Popup()
    .setLngLat(coordinates)
    .setHTML(
    `magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`
    )
    .addTo(map);
    });
     
    map.on('mouseenter', 'clusters', () => {
    map.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', 'clusters', () => {
    map.getCanvas().style.cursor = '';
    });
    });
</script>